
Given a sorted array and a number key, find the index of the first and last occurrence of the key in the array.

If the key is not present, return [-1, -1].

Expected Time Complexity: O(log n)

Examples
Array: [1, 2, 3, 3, 3, 4, 4, 5]
Number: 3
Answer: [2, 4]
Array: [1, 2, 3, 3, 3, 4, 4, 5]
Number: 5
Answer: [7, 7]
Array: [1, 2, 3, 3, 3, 4, 4, 5]
Number: 6
Answer: [-1, -1]

 int first(int start,int end ,int key,vector<int>&arr)
 {
	 int ans=-1;
	 while(start<=end)
	 {
		 int mid=start+(end-start)/2;
		  if(arr[mid]==key)
		  {
			  ans=mid;
			  end=mid-1;
		  }
		 else if(arr[mid]>key)
			 end=mid-1;
		 else start=mid+1;
	 }
	 return ans;
 }
 int second(int start,int end ,int key,vector<int>&arr)
 {
	 int ans=-1;
	 while(start<=end)
	 {
		 int mid=start+(end-start)/2;
		  if(arr[mid]==key)
		  {
			  ans=mid;
			  start=mid+1;
		  }
		 else if(arr[mid]<key)
			start=mid+1;
		 else end=mid-1;
	 }
	 return ans;
 }
vector<int> searchRange(vector<int> &arr, int key) {
   int start=0,end=arr.size()-1;
	int f=first(start,end,key,arr);
	int s=second(start,end,key,arr);
	return {f,s};
}
